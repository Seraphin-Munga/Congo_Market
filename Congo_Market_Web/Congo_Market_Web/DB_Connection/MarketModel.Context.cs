//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Congo_Market_Web.DB_Connection
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_Congo_MarketEntities : DbContext
    {
        public DB_Congo_MarketEntities()
            : base("name=DB_Congo_MarketEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<DB__Mst_Color_List_Result> DB__Mst_Color_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_Color_List_Result>("DB__Mst_Color_List");
        }
    
        public virtual ObjectResult<DB__Mst_Make_List_Result> DB__Mst_Make_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_Make_List_Result>("DB__Mst_Make_List");
        }
    
        public virtual ObjectResult<DB__Mst_PropertyType_List_Result> DB__Mst_PropertyType_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_PropertyType_List_Result>("DB__Mst_PropertyType_List");
        }
    
        public virtual ObjectResult<DB__Mst_Province_List_Result> DB__Mst_Province_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_Province_List_Result>("DB__Mst_Province_List");
        }
    
        public virtual ObjectResult<DB__Mst_Subcategory_List_Result> DB__Mst_Subcategory_List(Nullable<byte> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_Subcategory_List_Result>("DB__Mst_Subcategory_List", categoryIDParameter);
        }
    
        public virtual ObjectResult<DB__Mst_Town_List_Result> DB__Mst_Town_List(Nullable<byte> provinceID)
        {
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("provinceID", provinceID) :
                new ObjectParameter("provinceID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_Town_List_Result>("DB__Mst_Town_List", provinceIDParameter);
        }
    
        public virtual ObjectResult<DB__Mst_TypeVihicle_List_Result> DB__Mst_TypeVihicle_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_TypeVihicle_List_Result>("DB__Mst_TypeVihicle_List");
        }
    
        public virtual int DB_Image_Creation(Nullable<System.Guid> imageID, Nullable<System.Guid> postID, string imageLinks)
        {
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("imageID", imageID) :
                new ObjectParameter("imageID", typeof(System.Guid));
    
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            var imageLinksParameter = imageLinks != null ?
                new ObjectParameter("ImageLinks", imageLinks) :
                new ObjectParameter("ImageLinks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_Image_Creation", imageIDParameter, postIDParameter, imageLinksParameter);
        }
    
        public virtual ObjectResult<DB_Image_List_Result> DB_Image_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Image_List_Result>("DB_Image_List");
        }
    
        public virtual int DB_Image_Update(Nullable<System.Guid> imageID, Nullable<System.Guid> postID, string imageLinks)
        {
            var imageIDParameter = imageID.HasValue ?
                new ObjectParameter("imageID", imageID) :
                new ObjectParameter("imageID", typeof(System.Guid));
    
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            var imageLinksParameter = imageLinks != null ?
                new ObjectParameter("ImageLinks", imageLinks) :
                new ObjectParameter("ImageLinks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_Image_Update", imageIDParameter, postIDParameter, imageLinksParameter);
        }
    
        public virtual int DB_Register_Creation(Nullable<System.Guid> registerID, string firstName, string lastName, string email, string password, string telephone)
        {
            var registerIDParameter = registerID.HasValue ?
                new ObjectParameter("registerID", registerID) :
                new ObjectParameter("registerID", typeof(System.Guid));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_Register_Creation", registerIDParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter, telephoneParameter);
        }
    
        public virtual ObjectResult<DB_Register_Detail_Result> DB_Register_Detail(Nullable<System.Guid> registerID)
        {
            var registerIDParameter = registerID.HasValue ?
                new ObjectParameter("registerID", registerID) :
                new ObjectParameter("registerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Register_Detail_Result>("DB_Register_Detail", registerIDParameter);
        }
    
        public virtual ObjectResult<DB_Register_Login_Result> DB_Register_Login(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Register_Login_Result>("DB_Register_Login", emailParameter, passwordParameter);
        }
    
        public virtual int DB_Register_Update(Nullable<System.Guid> registerID, string firstName, string lastName, string telephone)
        {
            var registerIDParameter = registerID.HasValue ?
                new ObjectParameter("registerID", registerID) :
                new ObjectParameter("registerID", typeof(System.Guid));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_Register_Update", registerIDParameter, firstNameParameter, lastNameParameter, telephoneParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<DB_Image_Detail_Result> DB_Image_Detail(Nullable<System.Guid> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Image_Detail_Result>("DB_Image_Detail", postIDParameter);
        }
    
        public virtual ObjectResult<DB__Mst_Category_List_Result> DB__Mst_Category_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_Category_List_Result>("DB__Mst_Category_List");
        }
    
        public virtual ObjectResult<DB__Mst_Category_List_2_Result> DB__Mst_Category_List_2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_Category_List_2_Result>("DB__Mst_Category_List_2");
        }
    
        public virtual ObjectResult<DB__Mst_Province_List_2_Result> DB__Mst_Province_List_2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB__Mst_Province_List_2_Result>("DB__Mst_Province_List_2");
        }
    
        public virtual int DB_Post_Creation(Nullable<System.Guid> postID, Nullable<System.Guid> registerID, Nullable<byte> townID, Nullable<byte> subcategoryID, string title, Nullable<decimal> price, Nullable<bool> condition, Nullable<bool> isSold, Nullable<System.DateTime> date, string imageLink, string description)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            var registerIDParameter = registerID.HasValue ?
                new ObjectParameter("registerID", registerID) :
                new ObjectParameter("registerID", typeof(System.Guid));
    
            var townIDParameter = townID.HasValue ?
                new ObjectParameter("townID", townID) :
                new ObjectParameter("townID", typeof(byte));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("subcategoryID", subcategoryID) :
                new ObjectParameter("subcategoryID", typeof(byte));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(bool));
    
            var isSoldParameter = isSold.HasValue ?
                new ObjectParameter("isSold", isSold) :
                new ObjectParameter("isSold", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var imageLinkParameter = imageLink != null ?
                new ObjectParameter("imageLink", imageLink) :
                new ObjectParameter("imageLink", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_Post_Creation", postIDParameter, registerIDParameter, townIDParameter, subcategoryIDParameter, titleParameter, priceParameter, conditionParameter, isSoldParameter, dateParameter, imageLinkParameter, descriptionParameter);
        }
    
        public virtual int DB_Post_Update(Nullable<System.Guid> postID, Nullable<byte> townID, Nullable<byte> subcategoryID, string title, Nullable<decimal> price, Nullable<bool> condition, Nullable<bool> isSold, Nullable<System.DateTime> date, string imageLink, string description)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            var townIDParameter = townID.HasValue ?
                new ObjectParameter("townID", townID) :
                new ObjectParameter("townID", typeof(byte));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("subcategoryID", subcategoryID) :
                new ObjectParameter("subcategoryID", typeof(byte));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(bool));
    
            var isSoldParameter = isSold.HasValue ?
                new ObjectParameter("isSold", isSold) :
                new ObjectParameter("isSold", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var imageLinkParameter = imageLink != null ?
                new ObjectParameter("imageLink", imageLink) :
                new ObjectParameter("imageLink", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_Post_Update", postIDParameter, townIDParameter, subcategoryIDParameter, titleParameter, priceParameter, conditionParameter, isSoldParameter, dateParameter, imageLinkParameter, descriptionParameter);
        }
    
        public virtual int DB_PostPoperty_Creation(Nullable<System.Guid> propertyPostID, Nullable<System.Guid> postID, Nullable<byte> propertyType, string surfaceSize, Nullable<byte> bethroom, Nullable<byte> bathroom, string listBy, Nullable<bool> petAllow, Nullable<byte> numberOfParking, string imageLink, Nullable<System.Guid> registerID, Nullable<byte> townID, Nullable<byte> subcategoryID, string title, Nullable<decimal> price, Nullable<bool> condition, Nullable<bool> isSold, Nullable<System.DateTime> date, string description)
        {
            var propertyPostIDParameter = propertyPostID.HasValue ?
                new ObjectParameter("propertyPostID", propertyPostID) :
                new ObjectParameter("propertyPostID", typeof(System.Guid));
    
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("propertyType", propertyType) :
                new ObjectParameter("propertyType", typeof(byte));
    
            var surfaceSizeParameter = surfaceSize != null ?
                new ObjectParameter("surfaceSize", surfaceSize) :
                new ObjectParameter("surfaceSize", typeof(string));
    
            var bethroomParameter = bethroom.HasValue ?
                new ObjectParameter("bethroom", bethroom) :
                new ObjectParameter("bethroom", typeof(byte));
    
            var bathroomParameter = bathroom.HasValue ?
                new ObjectParameter("bathroom", bathroom) :
                new ObjectParameter("bathroom", typeof(byte));
    
            var listByParameter = listBy != null ?
                new ObjectParameter("listBy", listBy) :
                new ObjectParameter("listBy", typeof(string));
    
            var petAllowParameter = petAllow.HasValue ?
                new ObjectParameter("petAllow", petAllow) :
                new ObjectParameter("petAllow", typeof(bool));
    
            var numberOfParkingParameter = numberOfParking.HasValue ?
                new ObjectParameter("numberOfParking", numberOfParking) :
                new ObjectParameter("numberOfParking", typeof(byte));
    
            var imageLinkParameter = imageLink != null ?
                new ObjectParameter("imageLink", imageLink) :
                new ObjectParameter("imageLink", typeof(string));
    
            var registerIDParameter = registerID.HasValue ?
                new ObjectParameter("registerID", registerID) :
                new ObjectParameter("registerID", typeof(System.Guid));
    
            var townIDParameter = townID.HasValue ?
                new ObjectParameter("townID", townID) :
                new ObjectParameter("townID", typeof(byte));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("subcategoryID", subcategoryID) :
                new ObjectParameter("subcategoryID", typeof(byte));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(bool));
    
            var isSoldParameter = isSold.HasValue ?
                new ObjectParameter("isSold", isSold) :
                new ObjectParameter("isSold", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_PostPoperty_Creation", propertyPostIDParameter, postIDParameter, propertyTypeParameter, surfaceSizeParameter, bethroomParameter, bathroomParameter, listByParameter, petAllowParameter, numberOfParkingParameter, imageLinkParameter, registerIDParameter, townIDParameter, subcategoryIDParameter, titleParameter, priceParameter, conditionParameter, isSoldParameter, dateParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<DB_PostPoperty_Detail_Result> DB_PostPoperty_Detail(Nullable<System.Guid> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_PostPoperty_Detail_Result>("DB_PostPoperty_Detail", postIDParameter);
        }
    
        public virtual ObjectResult<DB_PostPoperty_List_Result> DB_PostPoperty_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_PostPoperty_List_Result>("DB_PostPoperty_List");
        }
    
        public virtual int DB_PostPoperty_Update(Nullable<System.Guid> postID, Nullable<byte> propertyType, string surfaceSize, Nullable<byte> bethroom, Nullable<byte> bathroom, string listBy, Nullable<bool> petAllow, Nullable<byte> numberOfParking, string imageLink, Nullable<System.Guid> registerID, Nullable<byte> townID, Nullable<byte> subcategoryID, string title, Nullable<decimal> price, Nullable<bool> condition, Nullable<System.DateTime> date, string description, Nullable<bool> isSold)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("propertyType", propertyType) :
                new ObjectParameter("propertyType", typeof(byte));
    
            var surfaceSizeParameter = surfaceSize != null ?
                new ObjectParameter("surfaceSize", surfaceSize) :
                new ObjectParameter("surfaceSize", typeof(string));
    
            var bethroomParameter = bethroom.HasValue ?
                new ObjectParameter("bethroom", bethroom) :
                new ObjectParameter("bethroom", typeof(byte));
    
            var bathroomParameter = bathroom.HasValue ?
                new ObjectParameter("bathroom", bathroom) :
                new ObjectParameter("bathroom", typeof(byte));
    
            var listByParameter = listBy != null ?
                new ObjectParameter("listBy", listBy) :
                new ObjectParameter("listBy", typeof(string));
    
            var petAllowParameter = petAllow.HasValue ?
                new ObjectParameter("petAllow", petAllow) :
                new ObjectParameter("petAllow", typeof(bool));
    
            var numberOfParkingParameter = numberOfParking.HasValue ?
                new ObjectParameter("numberOfParking", numberOfParking) :
                new ObjectParameter("numberOfParking", typeof(byte));
    
            var imageLinkParameter = imageLink != null ?
                new ObjectParameter("imageLink", imageLink) :
                new ObjectParameter("imageLink", typeof(string));
    
            var registerIDParameter = registerID.HasValue ?
                new ObjectParameter("registerID", registerID) :
                new ObjectParameter("registerID", typeof(System.Guid));
    
            var townIDParameter = townID.HasValue ?
                new ObjectParameter("townID", townID) :
                new ObjectParameter("townID", typeof(byte));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("subcategoryID", subcategoryID) :
                new ObjectParameter("subcategoryID", typeof(byte));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var isSoldParameter = isSold.HasValue ?
                new ObjectParameter("isSold", isSold) :
                new ObjectParameter("isSold", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_PostPoperty_Update", postIDParameter, propertyTypeParameter, surfaceSizeParameter, bethroomParameter, bathroomParameter, listByParameter, petAllowParameter, numberOfParkingParameter, imageLinkParameter, registerIDParameter, townIDParameter, subcategoryIDParameter, titleParameter, priceParameter, conditionParameter, dateParameter, descriptionParameter, isSoldParameter);
        }
    
        public virtual int DB_PostVihicles_Creation(Nullable<System.Guid> vihiclesID, Nullable<System.Guid> postID, Nullable<byte> makeID, Nullable<byte> typeID, Nullable<byte> colorID, string fuel, string transmission, string listBy, string mileage, string imageLink, Nullable<System.Guid> registerID, Nullable<byte> townID, Nullable<byte> subcategoryID, string title, Nullable<decimal> price, Nullable<bool> condition, Nullable<System.DateTime> date, string description, Nullable<bool> isSold)
        {
            var vihiclesIDParameter = vihiclesID.HasValue ?
                new ObjectParameter("vihiclesID", vihiclesID) :
                new ObjectParameter("vihiclesID", typeof(System.Guid));
    
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            var makeIDParameter = makeID.HasValue ?
                new ObjectParameter("makeID", makeID) :
                new ObjectParameter("makeID", typeof(byte));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("typeID", typeID) :
                new ObjectParameter("typeID", typeof(byte));
    
            var colorIDParameter = colorID.HasValue ?
                new ObjectParameter("colorID", colorID) :
                new ObjectParameter("colorID", typeof(byte));
    
            var fuelParameter = fuel != null ?
                new ObjectParameter("fuel", fuel) :
                new ObjectParameter("fuel", typeof(string));
    
            var transmissionParameter = transmission != null ?
                new ObjectParameter("transmission", transmission) :
                new ObjectParameter("transmission", typeof(string));
    
            var listByParameter = listBy != null ?
                new ObjectParameter("listBy", listBy) :
                new ObjectParameter("listBy", typeof(string));
    
            var mileageParameter = mileage != null ?
                new ObjectParameter("mileage", mileage) :
                new ObjectParameter("mileage", typeof(string));
    
            var imageLinkParameter = imageLink != null ?
                new ObjectParameter("imageLink", imageLink) :
                new ObjectParameter("imageLink", typeof(string));
    
            var registerIDParameter = registerID.HasValue ?
                new ObjectParameter("registerID", registerID) :
                new ObjectParameter("registerID", typeof(System.Guid));
    
            var townIDParameter = townID.HasValue ?
                new ObjectParameter("townID", townID) :
                new ObjectParameter("townID", typeof(byte));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("subcategoryID", subcategoryID) :
                new ObjectParameter("subcategoryID", typeof(byte));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var isSoldParameter = isSold.HasValue ?
                new ObjectParameter("isSold", isSold) :
                new ObjectParameter("isSold", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_PostVihicles_Creation", vihiclesIDParameter, postIDParameter, makeIDParameter, typeIDParameter, colorIDParameter, fuelParameter, transmissionParameter, listByParameter, mileageParameter, imageLinkParameter, registerIDParameter, townIDParameter, subcategoryIDParameter, titleParameter, priceParameter, conditionParameter, dateParameter, descriptionParameter, isSoldParameter);
        }
    
        public virtual ObjectResult<DB_PostVihicles_Detail_Result> DB_PostVihicles_Detail(Nullable<System.Guid> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_PostVihicles_Detail_Result>("DB_PostVihicles_Detail", postIDParameter);
        }
    
        public virtual ObjectResult<DB_PostVihicles_List_Result> DB_PostVihicles_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_PostVihicles_List_Result>("DB_PostVihicles_List");
        }
    
        public virtual int DB_PostVihicles_Update(Nullable<System.Guid> vihiclesID, Nullable<System.Guid> postID, Nullable<byte> makeID, Nullable<byte> typeID, Nullable<byte> colorID, string fuel, string transmission, string listBy, string mileage, string imageLink, Nullable<System.Guid> registerID, Nullable<byte> townID, Nullable<byte> subcategoryID, string title, Nullable<decimal> price, Nullable<bool> condition, Nullable<System.DateTime> date, string description, Nullable<bool> isSold)
        {
            var vihiclesIDParameter = vihiclesID.HasValue ?
                new ObjectParameter("vihiclesID", vihiclesID) :
                new ObjectParameter("vihiclesID", typeof(System.Guid));
    
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            var makeIDParameter = makeID.HasValue ?
                new ObjectParameter("makeID", makeID) :
                new ObjectParameter("makeID", typeof(byte));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("typeID", typeID) :
                new ObjectParameter("typeID", typeof(byte));
    
            var colorIDParameter = colorID.HasValue ?
                new ObjectParameter("colorID", colorID) :
                new ObjectParameter("colorID", typeof(byte));
    
            var fuelParameter = fuel != null ?
                new ObjectParameter("fuel", fuel) :
                new ObjectParameter("fuel", typeof(string));
    
            var transmissionParameter = transmission != null ?
                new ObjectParameter("transmission", transmission) :
                new ObjectParameter("transmission", typeof(string));
    
            var listByParameter = listBy != null ?
                new ObjectParameter("listBy", listBy) :
                new ObjectParameter("listBy", typeof(string));
    
            var mileageParameter = mileage != null ?
                new ObjectParameter("mileage", mileage) :
                new ObjectParameter("mileage", typeof(string));
    
            var imageLinkParameter = imageLink != null ?
                new ObjectParameter("imageLink", imageLink) :
                new ObjectParameter("imageLink", typeof(string));
    
            var registerIDParameter = registerID.HasValue ?
                new ObjectParameter("registerID", registerID) :
                new ObjectParameter("registerID", typeof(System.Guid));
    
            var townIDParameter = townID.HasValue ?
                new ObjectParameter("townID", townID) :
                new ObjectParameter("townID", typeof(byte));
    
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("subcategoryID", subcategoryID) :
                new ObjectParameter("subcategoryID", typeof(byte));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var conditionParameter = condition.HasValue ?
                new ObjectParameter("condition", condition) :
                new ObjectParameter("condition", typeof(bool));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var isSoldParameter = isSold.HasValue ?
                new ObjectParameter("isSold", isSold) :
                new ObjectParameter("isSold", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_PostVihicles_Update", vihiclesIDParameter, postIDParameter, makeIDParameter, typeIDParameter, colorIDParameter, fuelParameter, transmissionParameter, listByParameter, mileageParameter, imageLinkParameter, registerIDParameter, townIDParameter, subcategoryIDParameter, titleParameter, priceParameter, conditionParameter, dateParameter, descriptionParameter, isSoldParameter);
        }
    
        public virtual ObjectResult<DB_Post_Subcategory_List_Result> DB_Post_Subcategory_List(Nullable<byte> subcategoryID, Nullable<byte> categoryID, Nullable<byte> provinceID)
        {
            var subcategoryIDParameter = subcategoryID.HasValue ?
                new ObjectParameter("subcategoryID", subcategoryID) :
                new ObjectParameter("subcategoryID", typeof(byte));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(byte));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("provinceID", provinceID) :
                new ObjectParameter("provinceID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Post_Subcategory_List_Result>("DB_Post_Subcategory_List", subcategoryIDParameter, categoryIDParameter, provinceIDParameter);
        }
    
        public virtual ObjectResult<DB_Post_List_Result> DB_Post_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Post_List_Result>("DB_Post_List");
        }
    
        public virtual int DB_Post_List_IsSold(Nullable<System.Guid> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_Post_List_IsSold", postIDParameter);
        }
    
        public virtual ObjectResult<DB_Post_List_Customer_Result> DB_Post_List_Customer(Nullable<System.Guid> registerID)
        {
            var registerIDParameter = registerID.HasValue ?
                new ObjectParameter("registerID", registerID) :
                new ObjectParameter("registerID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Post_List_Customer_Result>("DB_Post_List_Customer", registerIDParameter);
        }
    
        public virtual ObjectResult<DB_Email_Exist_Result> DB_Email_Exist(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Email_Exist_Result>("DB_Email_Exist", emailParameter);
        }
    
        public virtual int DB_Register_ResetPassword(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DB_Register_ResetPassword", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<DB_Post_Detail_Result> DB_Post_Detail(Nullable<System.Guid> postID)
        {
            var postIDParameter = postID.HasValue ?
                new ObjectParameter("postID", postID) :
                new ObjectParameter("postID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Post_Detail_Result>("DB_Post_Detail", postIDParameter);
        }
    
        public virtual ObjectResult<DB_Post_Search_Result> DB_Post_Search(string seachTerm, Nullable<byte> provinceID)
        {
            var seachTermParameter = seachTerm != null ?
                new ObjectParameter("seachTerm", seachTerm) :
                new ObjectParameter("seachTerm", typeof(string));
    
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("provinceID", provinceID) :
                new ObjectParameter("provinceID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Post_Search_Result>("DB_Post_Search", seachTermParameter, provinceIDParameter);
        }
    
        public virtual ObjectResult<DB_Post_List_byTitle_Result> DB_Post_List_byTitle(string title)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Post_List_byTitle_Result>("DB_Post_List_byTitle", titleParameter);
        }
    }
}
